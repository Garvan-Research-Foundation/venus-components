import esquery from 'esquery';
import { get } from 'lodash';
import MagicString from 'magic-string';
import { createFilter, makeLegalIdentifier } from 'rollup-pluginutils';
import { createHash } from 'crypto';

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

// Copyright Joyent, Inc. and other Node contributors.

// Split a filename into [root, dir, basename, ext], unix version
// 'root' is just a slash, or nothing.
var splitPathRe =
    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
var splitPath = function(filename) {
  return splitPathRe.exec(filename).slice(1);
};


function extname(path) {
  return splitPath(path)[3];
}

// it's should be verify that treating it as commonjs plugin coverted flag.
var COMMONJS_CONVERTED_FLAG = '__moduleExports';
/**
 * avoid var conflict
 * @param file module id
 * @param name var name
 * @param maxLength max hash length
 */
function hashString(file, name, maxLength) {
    if (maxLength === void 0) { maxLength = 5; }
    return createHash('md5')
        .update(file + "__" + name)
        .digest('base64')
        .substr(0, maxLength);
}
/**
 * find named export declare source
 * @param ast
 * @param name
 */
function findDeclareSourceNode(ast, name) {
    var found = esquery(ast, "VariableDeclarator[id.name=" + name + "]")[0];
    var init = get(found, 'init');
    if (!init) {
        return undefined;
    }
    if (init.type === 'Identifier') {
        return findDeclareSourceNode(ast, init.name);
    }
    else if (init.type === 'ObjectExpression') {
        // find member like: x.routerRedux = require$$0;
        var members = esquery(ast, "AssignmentExpression > MemberExpression > [object.name=" + name + "][computed=false]");
        return __assign({}, init, { members: members });
    }
    else if (init.type === 'CallExpression') ;
}
/**
 * find exported node by var name
 * like: export { packages as __moduleExports };
 * @param ast
 * @param name
 */
function findExportedNode(ast, name) {
    var exported = esquery(ast, "ExportSpecifier[exported.name=\"" + name + "\"]")[0];
    return exported;
}
function appendExport(id, name, moduleName, ast, magicString, appendList) {
    // avoid duplicate export
    if (!findExportedNode(ast, name)) {
        var hashedName = makeLegalIdentifier(name + "_" + hashString(id, name));
        // magicString 插入后未插入 ast, 所以可能导致重复定义, 需要判断.
        if (!appendList[hashedName]) {
            magicString.append("\nvar " + hashedName + " = " + moduleName + "." + name + " \nexport { " + hashedName + " as " + name + " }\n");
            appendList[hashedName] = true;
        }
    }
}
function namedExport(options) {
    if (options === void 0) { options = { sourceMap: false }; }
    var extensions = options.extensions || ['.js'];
    var filter = createFilter(options.include, options.exclude);
    return {
        name: 'autoNamedExport',
        transform: function (code, id) {
            if (!filter(id) || extensions.indexOf(extname(id)) === -1) {
                return null;
            }
            // if (id.indexOf('ules/draft-js/lib/DraftEditorCompositionHandler.js') !== -1) {
            //   console.log(code);
            // }
            // 防止重复定义
            var appendList = {};
            var sourceMap = options.sourceMap;
            var magicString = new MagicString(code);
            var ast = this.parse(code);
            // find converted flag by commonjs plugin, we auto named export base on that.
            var commonjsExported = findExportedNode(ast, COMMONJS_CONVERTED_FLAG);
            var moduleName = get(commonjsExported, 'local.name');
            var nodeValue = findDeclareSourceNode(ast, moduleName);
            var properties = get(nodeValue, 'properties');
            if (properties) {
                properties.forEach(function (item) {
                    var name = item.key.name;
                    appendExport(id, name, moduleName, ast, magicString, appendList);
                });
            }
            var members = get(nodeValue, 'members');
            if (members) {
                members.forEach(function (item) {
                    var name = item.property.name;
                    appendExport(id, name, moduleName, ast, magicString, appendList);
                });
            }
            if (properties || members) {
                return {
                    code: magicString.toString(),
                    map: sourceMap ? magicString.generateMap() : null,
                };
            }
            return null;
        },
    };
}

export default namedExport;
